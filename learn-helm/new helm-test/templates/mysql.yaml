{{- if .Values.mysql.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels: { app: mysql }
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
  selector: { app: mysql }
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  labels: { app: mysql }
spec:
  clusterIP: None
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
  selector: { app: mysql }

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: mysql-headless
  replicas: 1
  selector:
    matchLabels: { app: mysql }
  template:
    metadata:
      labels: { app: mysql }
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
        - name: mysql
          image: mysql:8.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          envFrom:
            - configMapRef:
                name: { { .Values.component_name } }
          args:
            - "--default-authentication-plugin=mysql_native_password"
            - "--character-set-server=utf8mb4"
            - "--collation-server=utf8mb4_unicode_ci"
            - "--max_connections=200"
          readinessProbe:
            exec:
              command: ["sh","-lc","mysqladmin ping -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD"]
            initialDelaySeconds: 15
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","mysqladmin ping -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD"]
            initialDelaySeconds: 30
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      volumes: []
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi



---
  {{- end}}